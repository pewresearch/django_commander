from django.db import models
from picklefield.fields import PickledObjectField

from django_loaders.settings import LOADER_BASE_MODEL, LOADER_BASE_MANAGER


class LoggedExtendedModel(LOADER_BASE_MODEL):

    loaders = models.ManyToManyField("django_loaders.Loader", related_name="%(class)s_related")
    loader_logs = models.ManyToManyField("django_loaders.LoaderLog", related_name="%(class)s_related")
    # cleaners = models.ManyToManyField("django_loaders.Cleaner", related_name="%(class)s_related")
    # cleaner_logs = models.ManyToManyField("django_loaders.CleanerLog", related_name="%(class)s_related")

    class Meta:

        abstract=True


class Loader(LOADER_BASE_MODEL):

    """
    Refers to a loader class that's used to load data into the database.  Parameters are values used that have a bearing
    on the data that get loaded in, and so the name and parameters, taken together, refer to a specific set of data
    loaded by a specific process.  Most models in Logos have ManyToMany relationships with Loaders, so we can track
    the sources from which a given object's data have been pulled.
    """

    name = models.CharField(max_length=400, db_index=True, help_text="The name of a loader")
    parameters = models.TextField(null=True, help_text="The parameters used to initialize the loader")

    objects = LOADER_BASE_MANAGER().as_manager()

    class Meta:

        unique_together = ("name", "parameters")

    def __str__(self):

        return "%s %s" % (
            self.name,
            self.parameters
        )

    @property
    def loader_class(self):

        from django_loaders.utils import get_project_loaders
        return get_project_loaders()[self.name]

    @property
    def loader(self):

        return self.loader_class()

    def run(self):

        self.loader.run()


class LoaderLog(LOADER_BASE_MODEL):

    """
    A specific log generated by a loader, including optional parameters and any errors generated by the loader.
    """

    loader = models.ForeignKey("django_loaders.Loader", related_name="logs", help_text="The parent loader")
    start_time = models.DateTimeField(auto_now_add=True, help_text="The time at which the loader began executing")
    end_time = models.DateTimeField(null=True, help_text="The time at which the loader finished (if applicable)")
    options = models.TextField(null=True, help_text="The options passed to the loader")
    error = PickledObjectField(null=True, help_text="The error returned by the loader (if applicable)")

    objects = LOADER_BASE_MANAGER().as_manager()

    def __str__(self):

        if self.end_time: status = "COMPLETED"
        elif self.error: status = "FAILED"
        else: status = "RUNNING"
        return "%s (pk=%s): %s" % (
            str(self.loader),
            str(self.pk),
            status
        )